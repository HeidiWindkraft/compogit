#!/usr/bin/env bash

scriptdir="$(cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")" )" >/dev/null && pwd )"

commit=$1

if [ -z ${commit} ]; then
	echo "Error: No commmit given"
	exit 1;
fi

# Approach:
# Check whether there are multiple components in the commit. If not don't do anything.
# Git rebase -i starting with the given commit,
# passing an editor which replaces the "pick" of the given commit by an "edit".
# Determine components of last commit (HEAD) and create commit-messages for all the components.
# git reset HEAD^
# For all components in alphabetical order:
#   add all modified files of component ${component}
#   git commit -F ${commit_message_of_component}
# git rebase --continue

compos=$("${scriptdir}/compogit-get-files-of-commit" ${commit} \
			| "${scriptdir}/compogit-get-components-of-filelist" \
			| sort )
ncompos=$(echo "${compos}" | wc --words)
files_of_commit=$("${scriptdir}/compogit-get-files-of-commit" ${commit})

if [ ${ncompos} -lt 2 ]; then
	echo "Info: Commit \"${commit}\" doesn't modify multiple components," \
		"it only modifies \"${compos}\". Ignoring commit." 1>&2
	exit 0
fi

# Create commit messages in a temporary directory
tmpdir=$(mktemp -d || mktemp -d -t 'compogit_tmpdir')
if [ ! -d "${tmpdir}" ]; then
	echo "Error: Could not create temporary directory" 1>&2
	exit 1
else
	echo "Info: Created temporary directory \"${tmpdir}\"." \
		"Direcory will be removed again, if this script terminates normally." 1>&2
fi
for comp in ${compos}; do
	"${scriptdir}/compogit-get-splitmessage" ${comp} ${commit} > "${tmpdir}/${comp}_${commit}"
done
"${scriptdir}/compogit-get-splitmessage" none ${commit} > "${tmpdir}/none_${commit}"

# Start rebasing ...
export GIT_EDITOR="${scriptdir}/compogit-editor-edit-first-commit "
git rebase -i ${commit}^

git reset HEAD^

# Handle files which are in components
for comp in ${compos}; do
	"${scriptdir}/compogit-add-unstaged-files-of-component" ${comp}
	git commit -F "${tmpdir}/${comp}_${commit}"
done
# Handle files which aren't in components
if [[ ! -z $(git status --short --porcelain) ]]; then
	echo "Info: Re-adding files which are in no component" 1>&2
	git add ${files_of_commit}
	git commit -F "${tmpdir}/none_${commit}"
	if [ $? -ne 0 ]; then
		echo "Error: Failed to commit files which aren't part of a component." \
				"Commit them and then run 'git rebase --continue'" 1>&2
		exit 1
	fi
fi

# Remove commit messages again.
echo "Info: Removing temporary directory \"${tmpdir}\"" 1>&2
rm -r "${tmpdir}"

# Replay the rest of the commits - this should also avoid detached heads (although it will complain that there is nothing to replay).
echo "Info: Running 'git rebase --continue'" 1>&2
git rebase --continue
