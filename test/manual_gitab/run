#!/usr/bin/env bash

scriptdir="$(cd "$(dirname "$(realpath "${BASH_SOURCE[0]}")" )" >/dev/null && pwd )"
bindir="$(cd "${scriptdir}/../../bin" >/dev/null && pwd )"

# Create a git repository
mkdir gitab
cd gitab
git init
mkdir a
mkdir b

git config user.name "compogit test"
git config user.email test@compogit.com

# Create commits which don't touch multiple components.
echo a1 > a/a.txt
echo b1 > b/b.txt
git add a/a.txt
git commit -m "Initial commit to a/a.txt"
git add b/b.txt
git commit -m "Initial commit to b/b.txt"

# Create a commit which touches two components.
echo a2 > a/a.txt
echo b2 > b/b.txt
git add .
git commit -m "Commit to both components"

# Create some more commits which don't touch multiple components.
echo a3 > a/a.txt
echo b3 > b/b.txt
git add a/a.txt
git commit -m "Third commit to a/a.txt"
git add b/b.txt
git commit -m "Third commit to b/b.txt"

git log

# Get the commits
hash1=$(${bindir}/compogit-get-unpushed-commits | sed '1q;d' -) # "Third commit to b/b.txt"
hash2=$(${bindir}/compogit-get-unpushed-commits | sed '2q;d' -) # "Third commit to a/a.txt"

hash3=$(${bindir}/compogit-get-unpushed-commits | sed '3q;d' -) # "Commit to both components"

hash4=$(${bindir}/compogit-get-unpushed-commits | sed '4q;d' -) # "Initial commit to b/b.txt"
hash5=$(${bindir}/compogit-get-unpushed-commits | sed '5q;d' -) # "Initial commit to a/a.txt"


# Get a compogit configuration.
cp -r "${scriptdir}/compogit" ./compogit

# Write a rebase todo sequence.
echo "edit ${hash3}" >> command.txt
echo "pick ${hash2}" >> command.txt
echo "pick ${hash1}" >> command.txt

# Rebase using the todo sequence in command.txt
${bindir}/compogit-rebase-using-sequence command.txt ${hash4}

# Split commit "hash3" (the one which is marked with "edit").
git reset HEAD~

# Commit files of component A.
git add $(git status --porcelain | cut -c 4- | ${bindir}/compogit-filter-filelist-for-component A)
git commit -m "Split commit to component A"

# Commit files of component B.
git add $(git status --porcelain | cut -c 4- | ${bindir}/compogit-filter-filelist-for-component B)
git commit -m "Split commit to component B"

# Pick the rest of the commits.
git rebase --continue

echo "AFTER git rebase --continue"
git log

git log --format=format:%s > logmessages.txt
echo "" >> logmessages.txt

diff -u "${scriptdir}/expected.txt" logmessages.txt > logmessages.diff

status="FAIL"
cmp --silent "${scriptdir}/expected.txt" logmessages.txt && status="ok"
echo $status >> "../status.txt"
